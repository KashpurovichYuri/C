#include "LinkerError2.hpp"
#include <iostream>

extern int g_x;

int main()
{
	int x = g_x + 1;
}

/*

	Ошибка undefined reference to:
	C:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/12.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\Users\USER-S~1\AppData\Local\Temp\cczCpt09.o:main2.cpp:(.rdata$.refptr.g_x[.refptr.g_x]+0x0): undefined reference to `g_x'
collect2.exe: error: ld returned 1 exit status

	Предположим, что в файле main.cpp мы хотим воспользоваться глобальной переменной g_x, определённой в другом файле LinkerError_ODR2.cpp.
	Тогда мы должны написать extern при объявлении глобальной переменной в main2.cpp. И теперь можем её использовать в коде.
	Затем тот же самый extern потребуется в LinkerError2.h, так как это заголовочный файл.
	Наконец, в LinkerError2.cpp эта глобальная переменная должна быть объявлена! Но там снова extern... (Можно было и ничего не писать -- эффект тот же)
	Тогда по отдельности cpp-файлы скомпилируются, но линковщику необходимо знать определения используемых объектов.
	А определения глобальной переменной нет. Поэтому получим ошибку.
	
	Решение:
	В данном случае необходимо где-либо (только не в заголовочном файле) определить глобальную переменную. Тогда компоновщик не будет выдавать ошибок.
	
*/